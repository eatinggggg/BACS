# plot_regr_rsq(points) plots points and regression
#
# You can supply the following parameter:
#   points - dataframe of x,y points to plot
plot_regr_rsq <- function(points) {
max_x <- 50
if (nrow(points) == 0) {
plot(NA, xlim=c(-5,max_x), ylim=c(-5,max_x), xlab="x", ylab="y")
return()
}
plot(points, xlim=c(-5,max_x), ylim=c(-5,max_x), pch=19, cex=2, col="gray")
if (nrow(points) < 2) return()
mean_x <- mean(points$x)
mean_y <- mean(points$y)
segments(0, mean_y, max_x, mean_y, lwd=1, col="lightgray", lty="dotted")
segments(mean_x, 0, mean_x, mean_y, lwd=1, col="lightgray", lty="dotted")
regr <- lm(points$y ~ points$x)
abline(regr, lwd=2, col="cornflowerblue")
regr_summary <- summary(regr)
ssr <- sum((regr$fitted.values - mean(points$y))^2)
sse <- sum((points$y - regr$fitted.values)^2)
sst <- sum((points$y - mean(points$y))^2)
par(family="mono")
legend("topleft", legend = c(
paste(" Raw intercept: ", round(regr$coefficients[1], 2), "\n",
"Raw slope    : ", round(regr$coefficients[2], 2), "\n",
"Correlation  : ", round(cor(points$x, points$y), 2), "\n",
"SSR          : ", round(ssr, 2), "\n",
"SSE          : ", round(sse, 2), "\n",
"SST          : ", round(sst, 2), "\n",
"R-squared    : ", round(regr_summary$r.squared, 2))),
bty="n")
par(family="sans")
}
#  (hitting ESC will stop the simulation).
#
# You can supply the following parameter:
#   old_pts - dataframe of x,y points to start interacting with
#
# You will also see three numbers:
#   intercept – where the regression line intercepts the y-axis
#   regression coefficient – the slope of x on y
#   correlation - correlation of x and y
#   r-squared - R^2 of y
interactive_regression_rsq <- function(points=data.frame()) {
cat("Click on the plot to create data points; hit [esc] to stop")
repeat {
plot_regr_rsq(points)
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
}
return(points)
}
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
interactive_regression_rsq ()
red.csv("programmer_salaries.txt", sep="\t")
read.csv("programmer_salaries.txt", sep="\t")
#Q2
pro_sal<-read.csv("programmer_salaries.txt", sep="\t")
#Q2
sal<-read.csv("programmer_salaries.txt", sep="\t")
sal
lm(Salary~Experience+Score+Degree,data = sal)
summary(lm(Salary~Experience+Score+Degree,data = sal))
reg<-summary(lm(Salary~Experience+Score+Degree,data = sal))
reg$fitted.values
reg$residuals
reg<-summary(lm(Salary~Experience+Score+Degree,data = sal))
reg$residuals
reg$fitted.values
reg<-lm(Salary~Experience+Score+Degree,data = sal)
summary(reg)
reg$residuals
reg$fitted.values
sal.matrix
?data.matrix
data.matrix(sal)
mat_sal<_data.matrix(sal)
mat_sal<-data.matrix(sal)
dim(mat_sal)
mat_sal<-data.matrix(sal[,1:3])
mat_sal
salX<-data.matrix(sal[,1:3])
sal_x
salx
salX<-data.matrix(sal[,1:3])
salx
salx<-data.matrix(sal[,1:3])
salx
dim(salx)
?cbind
cbind(salx,[,1])
cbind(salx,[1,])
cbind(salx,c(1))
cbind(c(1),salx)
cbind(constantc:(1),salx)
cbind(constant:c(1),salx)
cbind(c(1),salx)
#2-b-ii
saly<-sal$Salary
class(saly)
#2-b-ii
saly<-c(sal$Salary)
class(saly)
class(salx)
#2-b-iii
beta_h<-solve(t(salx)%*%salx)
#2-b-iii
beta_h<-(solve(t(salx)%*%salx))%*%t(salx)%*%saly
beta_h
salx
salx<-cbind(c(1),salx)
cbind(c(1),salx)
#2-b-i
salx<-data.matrix(sal[,1:3])
salx
dim(salx)
cbind(c(1),salx)
salx<-cbind(c(1),salx)
salx
colnames(salx)[1]<-"intercept"
salx
#2-b-ii
saly<-sal$Salary
#2-b-iii
beta_h<-(solve(t(salx)%*%salx))%*%t(salx)%*%saly
beta_h
#2-b-iv
saly_h<-salx%*%beta_h
saly_h
#2-b-v
R_square<-cor(saly,saly_h)
R_square
#2-b-v
R_square<-cor(saly,saly_h)
SST<-var(saly)
SST
SSR<-SST*R_square
SSR
SSE<-SST-SSR
SSE
c(SST,SSR,SSE)
c("SST":SST,SSR,SSE)
data.frame("SST":SST,SSR,SSE)
data.frame(SST:SST,SSR:SSR,SSE:SSE)
data.frame(SST,SSR,SSE)
data.frame(SST,SSR,SSE)
SSR<-sum((saly_h-mean(saly))^2)
SSE<-sum((saly-saly_h)^2)
SSR
SSE
SST<-var(saly)
data.frame(SST,SSR,SSE)
SSR<-(saly_h-mean(saly))^2
SSR
#2-b-v
SST<-var(saly)
SST
SSR
SSR<-(saly_h-mean(saly))^2
SSR
#2-b-v
SST<-sum((saly-mean(saly))^2)
SST
var(saly)
#2-b-v
SST<-sum((saly-mean(saly))
SST
#2-b-v
SST<-(saly-mean(saly)
var(saly)
#2-b-v
SST<-saly-mean(saly)
SST
#2-b-v
SST<-sum((saly-mean(saly))^2)
SST
SSR<-(saly_h-mean(saly))^2
SSR
SSR<-sum((saly_h-mean(saly))^2)
SSR
SSE<-sum((saly-saly_h)^2)
SSR
data.frame(SST,SSR,SSE)
data.frame(SST,SSR+SSE)
data.frame(SST,SSR,SSE)
#2-c-i
R_square_2<-SSR/SST
#2-c-ii
R_square_2<-cor(saly,saly_h)
#2-c-i
R_square_1<-SSR/SST
R_square_1
#2-c-ii
R_square_2<-cor(saly,saly_h)
R_square_2
data.frame(SST,SSR,SSE)
R_square_2
#2-c-ii
R_square_2<-cor(saly,saly_h)
R_square_2
#3
auto <- read.table("auto-data.txt", header=FALSE, na.strings = "?")
names(auto) <- c("mpg", "cylinders", "displacement", "horsepower", "weight",
"acceleration", "model_year", "origin", "car_name")
auto
#3
auto <- read.table("auto-data.txt", header=FALSE, na.strings = "?")
auto
names(auto) <- c("mpg", "cylinders", "displacement", "horsepower", "weight",
"acceleration", "model_year", "origin", "car_name")
auto
plot(auto)
#3-a-ii
cor(auto,use = "pairwise.complete.obs")
auto
#3-a-ii
cor(auto)
#3-a-ii
?cor
cor(auto,auto$mpg,use = "pairwise.complete.obs")
auto
#3-a-ii
cor(auto["mpg", "cylinders", "displacement", "horsepower", "weight",
"acceleration", "model_year", "origin"],auto$mpg,use = "pairwise.complete.obs")
#3-a-ii
cor(auto["mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin"],auto$mpg,use = "pairwise.complete.obs")
#3-a-ii
cor(auto["mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin"],auto$mpg,use = "pairwise.complete.obs")
#3-a-ii
apply(auto,1,cor)
#3-a-ii
mapply(cor, audio[,2:5], audio[,1])
#3-a-ii
mapply(cor, auto[,2:5], auto[,1])
#3-a-ii
mapply(cor(,use="pairwise.complete.obs"), auto[,2:5], auto[,1])
#3-a-ii
outer(auto[,:], auto[,:], cor())
#3-a-ii
outer(auto[,], auto[,], cor())
#3-a-i
auto <- read.table("auto-data.txt", header=FALSE, na.strings = "?")
names(auto) <- c("mpg", "cylinders", "displacement", "horsepower", "weight",
"acceleration", "model_year", "origin", "car_name")
auto
plot(auto)
#3-a-ii
cor(x, method = c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin"),use = "pairwise.complete.obs")
#3-a-ii
cor(auto, method = c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin"),use = "pairwise.complete.obs")
auto
#3-a-ii
class(auto)
cor(auto, method = c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin"),use = "pairwise.complete.obs")
cor(auto[,c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin"),], use = "pairwise.complete.obs")
cor(auto[,c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin"),], use = "pairwise.complete.obs")
cor(auto[,c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin",),], use = "pairwise.complete.obs")
cor(auto[,c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin","car_name")], use = "pairwise.complete.obs")
cor(auto[,c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin")], use = "pairwise.complete.obs")
#3-b
lm(mpg~cylinders+displacement+horsepower+weight+acceleration+model_year+factor(origin),data = auto)
#3-b
mpg_line<-lm(mpg~cylinders+displacement+horsepower+weight+acceleration+model_year+factor(origin),data = auto)
summary(mpg_line)
#3-b
mpg_line<-lm(mpg~cylinders+displacement+horsepower+weight+acceleration+model_year+factor(origin),data = auto)
summary(mpg_line)
#3-c
auto_std<-scale(auto)
auto
#3-c
auto_std<-scale(auto)
library(janitor)
library(dplyr)
my_summary <- auto %>%
count(car_name, sort = TRUE)
#car_name怎麼辦
cor(auto[,c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin")], use = "pairwise.complete.obs")
my_summary <- auto %>%
count(car_name, sort = TRUE)
my_summary
#abandon car name
cor(auto[,c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin")], use = "pairwise.complete.obs")
#abandon car name
auto<-auto[,!'car_name']
#abandon car name
auto['car_name']<-NULL
auto
cor(auto[,c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin")], use = "pairwise.complete.obs")
#3-c
auto_std<-scale(auto)
#3-c
auto_std<-scale(auto)
auto_std
sd(auto['origin'])
sd(as.numeric(auto['origin']))
class(auto['origin'])
class(as.numeric(auto['origin']))
class(as.numeric(auto['origin']))
sd(auto[,"origin"])
#sd(auto[,"origin"])
mpg_stdreg<-lm(mpg~cylinders+displacement+horsepower+weight+acceleration+model_year+factor(origin),data = auto)
mpg_stdreg
summary(mpg_stdreg)
#3-b
mpg_reg<-lm(mpg~cylinders+displacement+horsepower+weight+acceleration+model_year+factor(origin),data = auto)
summary(mpg_reg)
#3-b
?lm
summary(mpg_reg)
#3-c-ii
#unsignificant var:cylinders,horsepower,acceleration
cor(auto[,c("cylinders","horsepower","acceleration")],y=auto[,"mpg"])
#3-c-ii
#unsignificant var:cylinders,horsepower,acceleration
summary(lm(mpg~cylinders,data=auto))
lm(mpg~cylinders,data=auto)$residuals
plot(density(lm(mpg~cylinders,data=auto)$residuals))
summary(lm(mpg~horsepower,data=auto))
plot(density(lm(mpg~horsepower,data=auto)$residuals))
summary(lm(mpg~acceleration,data=auto))
plot(density(lm(mpg~acceleration,data=auto)$residuals))
#Q2-a
sal<-read.csv("programmer_salaries.txt", sep="\t")
reg<-lm(Salary~Experience+Score+Degree,data = sal)
summary(reg)
reg$residuals
reg$fitted.values
head(reg$residual
head(reg$residual)
head(sal)
head(reg$residual)
summary(reg)
#2-a
sal<-read.csv("programmer_salaries.txt", sep="\t")
reg<-lm(Salary~Experience+Score+Degree,data = sal)
summary(reg)
head(reg$residual)
head(reg$fitted.values)
head(sal)
?head
head(reg$fitted.values,n=5)
#2-a
sal<-read.csv("programmer_salaries.txt", sep="\t")
reg<-lm(Salary~Experience+Score+Degree,data = sal)
head(sal,)
summary(reg)
head(reg$residual,n=5)
head(reg$fitted.values,n=5)
#2-a
sal<-read.csv("programmer_salaries.txt", sep="\t")
reg<-lm(Salary~Experience+Score+Degree,data = sal)
head(sal,)
summary(reg)
head(reg$residual,n=5)
head(reg$fitted.values,n=5)
dim(salx)
#2-b-i
salx<-data.matrix(sal[,1:3])
salx<-cbind(c(1),salx)
colnames(salx)[1]<-"intercept"
#2-b-ii
saly<-sal$Salary
#2-b-iii
beta_h<-(solve(t(salx)%*%salx))%*%t(salx)%*%saly
beta_h
#2-b-iv
saly_h<-salx%*%beta_h
saly_h
#2-b-iv
saly_h<-salx%*%beta_h
saly_h
res<-saly-saly_h
res
#2-b-iv
saly_h<-salx%*%beta_h
head(saly_h,n=5)
res<-saly-saly_h
head(res,n=5)
#2-b-v
SST<-sum((saly-mean(saly))^2)
SSR<-sum((saly_h-mean(saly))^2)
SSE<-sum((saly-saly_h)^2)
data.frame(SST,SSR,SSE)
#2-c-i
R_square_1<-SSR/SST
R_square_1
#2-c-ii
R_square_2<-cor(saly,saly_h)
R_square_2
#3-a-ii
library(dplyr)
my_summary <- auto %>%
count(car_name, sort = TRUE)
my_summary#there are too many categories of car_name, so I'll abandon this column.
#abandon car name
auto['car_name']<-NULL
cor(auto[,c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin")], use = "pairwise.complete.obs")
#3-a-ii
library(dplyr)
my_summary <- auto %>%
count(car_name, sort = TRUE)
my_summary#there are too many categories of car_name, not valuable for linear regression model
auto['car_name']<-NULL#abandon car_name column
cor(auto[,c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin")], use = "pairwise.complete.obs")
#3-a-i
auto <- read.table("auto-data.txt", header=FALSE, na.strings = "?")
names(auto) <- c("mpg", "cylinders", "displacement", "horsepower", "weight",
"acceleration", "model_year", "origin", "car_name")
#3-a-ii
library(dplyr)
my_summary <- auto %>%
count(car_name, sort = TRUE)
my_summary#there are too many categories of car_name, not valuable for linear regression model
auto['car_name']<-NULL#abandon car_name column
cor(auto[,c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "model_year", "origin")], use = "pairwise.complete.obs")

)
legend(x=3,y=0.35,legend=text,bty="n",cex=0.6,y.intersp =1)
}
?qt
manipulate(
t_test_plot(diff, sd, n, alpha),
diff  = slider(0, 4, step = 0.1, initial = 0.7),
sd    = slider(1, 5, step = 0.1, initial = 2.9),
n     = slider(2, 500, step = 1, initial = 50),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
library(manipulate)
install.packages("manipulate")
library(manipulate)
install.packages("manipulate")
library(manipulate)
# Plot a distribution
plotdist <- function(xseq, xdens, col, xlim, type, lty, lwd, segments=NULL, qlty, qcol, polyfill=NULL) {
if (type == "plot") {
plot(xseq, xdens, type="l", lwd=0, col=col, frame=FALSE, xlim=xlim, lty=lty, ylab='', xlab='')
}
if (!is.null(polyfill)) {
polygon(polyfill[,1], polyfill[,2], col=qcol, border=qcol)
}
# draw quantile lines
if (!is.null(segments)) {
segments(x0=segments[,1], x1=segments[,1], y0=0, y1=segments[,2], lwd=lwd, col=qcol, lty=qlty)
}
lines(xseq, xdens, type="l", lwd=lwd, col=col, lty=lty)
}
?seq
# Plot the t distribution
plott <- function(lwd=2, ncp=0, df=300, col=rgb(0.30,0.50,0.75), xlim=c(-3,3), type="plot", lty="solid", quants=NULL, qlty="solid", qcol=rgb(0.30,0.50,0.75, 0.5), fill_quants=NULL) {
xseq = seq(ncp-6, ncp+6, length=1000)
xdens = dt(xseq, ncp=ncp, df=df)
if (length(xlim) == 0) {
xlim = c(ncp-3.5, ncp+3.5)
}
segments <- NULL
polyfill <- NULL
if (!is.null(quants)) {
xquants = qt(quants, ncp=ncp, df=df)
dquants = dt(xquants, ncp=ncp, df=df)
segments = cbind(xquants, dquants)
}
if(!is.null(fill_quants)) {
polyq = qt(fill_quants, ncp=ncp, df=df)
polyfill.x = seq(polyq[1], polyq[2], by=0.001)
polyfill.y = dt(polyfill.x, ncp=ncp, df=df)
polyfill.x = c(polyfill.x[1], polyfill.x, tail(polyfill.x,1))
polyfill.y = c(0, polyfill.y, 0)
polyfill <- cbind(polyfill.x, polyfill.y)
}
plotdist(xseq, xdens, col, xlim, type, lty, lwd, segments, qlty, qcol, polyfill)
}
t_null_plot <- function(df, alpha) {
plott(df=df, col=rgb(0.75, 0.1, 0.1), qcol=rgb(1, 0.5, 0.5), xlim=c(-6, 6), fill_quants=c(1-alpha, 0.999))
}
t_alt_lines <- function(df, ncp=0, alpha) {
blue <- rgb(0.1, 0.1, 0.75)
lightblue <- rgb(0.4, 0.4, 1, 0.3)
quants <- c(0.5)
power_quant <- pt(qt(1-alpha, df=df), df=df, ncp=ncp)
plott(df=df, ncp=ncp, type='lines', lty="dashed", col=blue, quants=quants, qcol=lightblue, xlim=c(-6, 6), fill_quants=c(power_quant, 0.999))
}
?legend
t_test_plot <- function(diff, sd, n, alpha) {
df=n-1
t = diff/(sd/sqrt(n))
t_null_plot(df, alpha)
t_alt_lines(df,t, alpha)
text<-c(paste0("diff=",diff),
paste0("sd=",sd),
paste0("n=",n),
paste0("alpha=",alpha)
)
legend(x=3,y=0.35,legend=text,bty="n",cex=0.6,y.intersp =1)
}
?qt
manipulate(
t_test_plot(diff, sd, n, alpha),
diff  = slider(0, 4, step = 0.1, initial = 0.7),
sd    = slider(1, 5, step = 0.1, initial = 2.9),
n     = slider(2, 500, step = 1, initial = 50),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
# interactive_regression() runs a regression simulation.
# Click on the plotting area to add points and see a corresponding regression line
#  (hitting ESC will stop the simulation).
#
# You will also see three numbers:
#   intercept ?? where the regression line intercepts the y-axis
#   regression coefficient ?? the slope of x on y
#   correlation - correlation of x and y.
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame()
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(1, 50, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "))
text(1, 45, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "))
text(1, 40, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "))
}
return(points)
}
points = data.frame(1:10)
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame(1:10)
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(1, 50, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "))
text(1, 45, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "))
text(1, 40, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "))
}
return(points)
}
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame(1:10)
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(1, 50, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "))
text(1, 45, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "))
text(1, 40, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "))
}
return(points)
}
# interactive_regression() runs a regression simulation.
# Click on the plotting area to add points and see a corresponding regression line
#  (hitting ESC will stop the simulation).
#
# You will also see three numbers:
#   intercept ?? where the regression line intercepts the y-axis
#   regression coefficient ?? the slope of x on y
#   correlation - correlation of x and y.
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame()
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(1, 50, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "))
text(1, 45, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "))
text(1, 40, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "))
}
return(points)
}
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame(1:10)
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(1, 45, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "))
text(1, 40, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "))
text(1, 35, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "))
}
return(points)
}
interactive_regression()
interactive_regression()
# interactive_regression() runs a regression simulation.
# Click on the plotting area to add points and see a corresponding regression line
#  (hitting ESC will stop the simulation).
#
# You will also see three numbers:
#   intercept ?? where the regression line intercepts the y-axis
#   regression coefficient ?? the slope of x on y
#   correlation - correlation of x and y.
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame(1:10)
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(1, 45, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "))
text(1, 40, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "))
text(1, 35, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "))
}
return(points)
}
interactive_regression()
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame()
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(1, 45, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "))
text(1, 40, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "))
text(1, 35, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "))
}
return(points)
}
interactive_regression()
interactive_regression()
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame()
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(0.5, 45, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "))
text(0.5, 40, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "))
text(0.5, 35, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "))
}
return(points)
}
interactive_regression()
?text
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame()
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(1.5, 45, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "),cex=0.5)
text(1.5, 40, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "),cex=0.5)
text(1.5, 35, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "),cex=0.5)
}
return(points)
}
interactive_regression()
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame()
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(1.5, 45, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "),cex=0.5)
text(1.5, 40, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "),cex=0.5)
text(1.5, 35, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "),cex=0.5)
}
return(points)
}
interactive_regression()
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame()
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(1.5, 45, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "),cex=0.75)
text(1.5, 40, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "),cex=0.75)
text(1.5, 35, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "),cex=0.75)
}
return(points)
}
interactive_regression()
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame()
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(1.5, 50, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "),cex=0.85)
text(1.5, 45, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "),cex=0.85)
text(1.5, 40, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "),cex=0.85)
}
return(points)
}
interactive_regression()
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame()
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(1.6, 50, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "),cex=0.85)
text(1.6, 45, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "),cex=0.85)
text(1.6, 40, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "),cex=0.85)
}
return(points)
}
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame()
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(2, 50, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "),cex=0.8)
text(2, 45, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "),cex=0.8)
text(2, 40, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "),cex=0.8)
}
return(points)
}
interactive_regression()
interactive_regression <- function() {
cat("Click on the plot to create data points; hit [esc] to stop")
plot(NA, xlim=c(-5,50), ylim=c(-5,50))
points = data.frame()
repeat {
click_loc <- locator(1)
if (is.null(click_loc)) break
if(nrow(points) == 0 ) {
points <- data.frame(x=click_loc$x, y=click_loc$y)
} else {
points <- rbind(points, c(click_loc$x, click_loc$y))
}
plot(points, xlim=c(-5,50), ylim=c(-5,50), pch=19, cex=2, col="gray")
if (nrow(points) < 2) next
model <- lm(points$y ~ points$x)
abline(model, lwd=2, col="cornflowerblue")
text(2.2, 50, paste(c("Raw intercept: ", round(model$coefficients[1], 2)), collapse=" "),cex=0.8)
text(2, 45, paste(c("Raw slope    : ", round(model$coefficients[2], 2)), collapse=" "),cex=0.8)
text(2, 40, paste(c("Correlation  : ", round(cor(points$x, points$y), 2)), collapse=" "),cex=0.8)
}
return(points)
}
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression()
interactive_regression()
pts<-interactive_regression()
pts<-interactive_regression()
?lm
pts<-interactive_regression()
pts<-interactive_regression()
pts<-interactive_regression()
pts<-interactive_regression()
pts<-interactive_regression()
pts<-interactive_regression()
pts<-interactive_regression()
summary( lm( pts$y ~ pts$x ))
cor(pts)
print(pts)
pts$x<-(pts$x-mean(x))/sd(pts$x)
pts$y<-(pts$y-mean(y))/sd(pts$y)
pts<-interactive_regression()
summary( lm( pts$y ~ pts$x ))
cor(pts)
pts$x<-(pts$x-mean(x))/sd(pts$x)
class(pts)
pts$x<-(pts$x-mean(pts$x))/sd(pts$x)
pts$y<-(pts$y-mean(pts$y))/sd(pts$y)
#install.packages("data.table")
library(data.table)
ac_bundles_dt<-fread("piccollage_accounts_bundles.csv")
ac_bundles_matrix<-as.matrix(ac_bundles_dt[,-1,with=FALSE])
#standardized regression line
summary( lm( pts$y ~ pts$x ))
pts<-interactive_regression()
pts<-interactive_regression()
#original regression line
summary( lm( pts$y ~ pts$x ))
cor(pts)
#standardized
pts$x<-(pts$x-mean(pts$x))/sd(pts$x)
pts$y<-(pts$y-mean(pts$y))/sd(pts$y)
#standardized regression line
summary( lm( pts$y ~ pts$x ))

den<-sapply(resamples,compute_sample_mean)
plot(density(den),col="blue",lwd=2)
#3-a-iv
interval<-function(data){
return (c(mean(data)-1.96*sd(data),mean(data)+1.96*sd(data)))
}
bootstrap_interval<-sapply(resamples,interval)
bootstrap_interval
#3-b-i
median(minday)
#3-b-ii
boostrap<-sapply(resamples,median)
boostrap
#3-b-iii
interval<-function(data){
return (c(mean(data)-1.96*sd(data),mean(data)+1.96*sd(data)))
}
bootstrap_interval<-sapply(boostrap,interval)
bootstrap_interval
#1-a
standardized<-function(numbers){
numbers<-(numbers- mean(numbers))/sd(numbers)
return (numbers)
}
rnorm<-rnorm(n=1000,mean=940,sd=190)
rnorm_std<-standardized(rnorm)
plot(density(rnorm_std),col="blue",lwd=2)
#1-b
minday_std<-standardized(minday)
plot(density(minday_std), col="green", lwd=2)
mean(minday_std)
sd(minday_std)
visualize_sample_ci <- function(num_samples, sample_size, pop_size,mean,sd) {
# Simulate a large population
population_data <- rnorm(n=pop_size, mean=mean,sd=sd)
pop_mean <- mean(population_data)
pop_sd <- sd(population_data)
# Simulate samples
samples <- replicate(num_samples,
sample(population_data, sample_size, replace=FALSE))
# Calculate descriptives of samples
sample_means = apply(samples, 2, FUN=mean)
sample_stdevs = apply(samples, 2, FUN=sd)
sample_stderrs <- sample_stdevs/sqrt(sample_size)
ci95_low  <- sample_means - sample_stderrs*1.96
ci95_high <- sample_means + sample_stderrs*1.96
ci99_low  <- sample_means - sample_stderrs*2.58
ci99_high <- sample_means + sample_stderrs*2.58
# Visualize confidence intervals of all samples
plot(NULL, xlim=c(pop_mean-(pop_sd/2), pop_mean+(pop_sd/2)),
ylim=c(1,num_samples), ylab="Samples", xlab="Confidence Intervals")
add_ci_segment(ci95_low, ci95_high, ci99_low, ci99_high,
sample_means, 1:num_samples, good=TRUE)
# Visualize samples with CIs that don't include population mean
bad = which(((ci95_low > pop_mean) | (ci95_high < pop_mean)) |
((ci99_low > pop_mean) | (ci99_high < pop_mean)))
add_ci_segment(ci95_low[bad], ci95_high[bad], ci99_low[bad], ci99_high[bad],
sample_means[bad], bad, good=FALSE)
# Draw true population mean
abline(v=mean(population_data))
}
add_ci_segment <- function(ci95_low, ci95_high, ci99_low, ci99_high,
sample_means, indices, good=TRUE) {
segment_colors <- list(c("lightcoral", "coral3", "coral4"),
c("lightskyblue", "skyblue3", "skyblue4"))
color <- segment_colors[[as.integer(good)+1]]
segments(ci99_low, indices, ci99_high, indices, lwd=3, col=color[1])
segments(ci95_low, indices, ci95_high, indices, lwd=3, col=color[2])
points(sample_means, indices, pch=18, cex=0.6, col=color[3])
}
visualize_sample_ci(num_samples = 100, sample_size = 100, pop_size=10000,
mean=20, sd=3)
visualize_sample_ci(num_samples = 100, sample_size = 300, pop_size=10000,
mean=20, sd=3)
#3-a-i
bookings <- read.table("first_bookings_datetime_sample.txt", header=TRUE)
bookings$datetime[1:9]
hours  <- as.POSIXlt(bookings$datetime, format="%m/%d/%Y %H:%M")$hour
mins   <- as.POSIXlt(bookings$datetime, format="%m/%d/%Y %H:%M")$min
minday <- hours*60 + mins
plot(density(minday), main="Minute (of the day) of first ever booking", col="blue", lwd=2)
mean(minday)
sd(minday)
interval<-c(mean(minday)-1.96*sd(minday),mean(minday)+1.96*sd(minday))
interval
minday
#3-a-i
bookings <- read.table("first_bookings_datetime_sample.txt", header=TRUE)
bookings$datetime[1:9]
hours  <- as.POSIXlt(bookings$datetime, format="%m/%d/%Y %H:%M")$hour
mins   <- as.POSIXlt(bookings$datetime, format="%m/%d/%Y %H:%M")$min
minday <- hours*60 + mins
plot(density(minday), main="Minute (of the day) of first ever booking", col="blue", lwd=2)
mean(minday)
sd(minday)
interval<-c(mean(minday)-1.96*sd(minday),mean(minday)+1.96*sd(minday))
interval
#3-a-ii
resamples<-replicate(2000,sample(minday ,100, replace=TRUE))
#3-a-iii
compute_sample_mean <- function(sample0) {
resample <- sample(sample0, length(sample0), replace=TRUE)
mean(resample)
}
den<-sapply(resamples,compute_sample_mean)
plot(density(den),col="blue",lwd=2)
#3-a-iv
interval<-function(data){
return (c(mean(data)-1.96*sd(data),mean(data)+1.96*sd(data)))
}
bootstrap_interval<-sapply(resamples,interval)
bootstrap_interval
#2
visualize_sample_ci <- function(num_samples=100, sample_size=100, pop_size=10000,distr_func=rnorm,...) {
# Simulate a large population
population_data <- rnorm(n=pop_size, ...)
pop_mean <- mean(population_data)
pop_sd <- sd(population_data)
# Simulate samples
samples <- replicate(num_samples,
sample(population_data, sample_size, replace=FALSE))
# Calculate descriptives of samples
sample_means = apply(samples, 2, FUN=mean)
sample_stdevs = apply(samples, 2, FUN=sd)
sample_stderrs <- sample_stdevs/sqrt(sample_size)
ci95_low  <- sample_means - sample_stderrs*1.96
ci95_high <- sample_means + sample_stderrs*1.96
ci99_low  <- sample_means - sample_stderrs*2.58
ci99_high <- sample_means + sample_stderrs*2.58
# Visualize confidence intervals of all samples
plot(NULL, xlim=c(pop_mean-(pop_sd/2), pop_mean+(pop_sd/2)),
ylim=c(1,num_samples), ylab="Samples", xlab="Confidence Intervals")
add_ci_segment(ci95_low, ci95_high, ci99_low, ci99_high,
sample_means, 1:num_samples, good=TRUE)
# Visualize samples with CIs that don't include population mean
bad = which(((ci95_low > pop_mean) | (ci95_high < pop_mean)) |
((ci99_low > pop_mean) | (ci99_high < pop_mean)))
add_ci_segment(ci95_low[bad], ci95_high[bad], ci99_low[bad], ci99_high[bad],
sample_means[bad], bad, good=FALSE)
# Draw true population mean
abline(v=mean(population_data))
}
#2-a-i
visualize_sample_ci(num_samples = 100, sample_size = 100, pop_size=10000, distr_func = rnorm
mean=20, sd=3)
#2-a-i
visualize_sample_ci(num_samples = 100, sample_size = 100, pop_size=10000, distr_func = rnorm)
#2-a-ii
visualize_sample_ci(num_samples = 100, sample_size = 300, pop_size=10000,distr_func = rnorm)
#2-a-i
visualize_sample_ci(num_samples = 100, sample_size = 100, pop_size=10000, distr_func = rnorm)
#2-b
visualize_sample_ci(num_samples = 100, sample_size = 300, pop_size=10000,distr_func = rnorm)
#2-a-ii
visualize_sample_ci(num_samples = 100, sample_size = 100, pop_size=10000, distr_func = rnorm)
#2-b
visualize_sample_ci(num_samples = 100, sample_size = 300, pop_size=10000,distr_func = rnorm)
bookings <- read.table("first_bookings_datetime_sample.txt", header=TRUE)
bookings$datetime[1:9]
hours  <- as.POSIXlt(bookings$datetime, format="%m/%d/%Y %H:%M")$hour
mins   <- as.POSIXlt(bookings$datetime, format="%m/%d/%Y %H:%M")$min
minday <- hours*60 + mins
plot(density(minday), main="Minute (of the day) of first ever booking", col="blue", lwd=2)
mean(minday)
sd(minday)
interval<-c(mean(minday)-1.96*sd(minday)/sqrt(),mean(minday)+1.96*sd(minday))
interval
?sd
interval<-c(mean(minday)-1.96*sd(minday)/sqrt(minday),mean(minday)+1.96*sd(minday))
interval
minday
interval<-c(mean(minday)-1.96*sd(minday)/sqrt(minday),mean(minday)+1.96*sd(minday))
interval
#3-a-i
bookings <- read.table("first_bookings_datetime_sample.txt", header=TRUE)
bookings$datetime[1:9]
hours  <- as.POSIXlt(bookings$datetime, format="%m/%d/%Y %H:%M")$hour
mins   <- as.POSIXlt(bookings$datetime, format="%m/%d/%Y %H:%M")$min
minday <- hours*60 + mins
plot(density(minday), main="Minute (of the day) of first ever booking", col="blue", lwd=2)
mean(minday)
sd(minday)
interval<-c(mean(minday)-1.96*sd(minday)/sqrt(minday),mean(minday)+1.96*sd(minday))
interval
mean(minday)
sd(minday)
interval<-mean(minday)+c(-1.96,1.96)*sd(minday)/sart(1000)
interval
interval<-mean(minday)+c(-1.96,1.96)*sd(minday)/sqrt(1000)
interval
interval<-mean(minday)+c(-1.96,1.96)*sd(minday)/sqrt(length(minday))
interval
#3-a-i
bookings <- read.table("first_bookings_datetime_sample.txt", header=TRUE)
bookings$datetime[1:9]
hours  <- as.POSIXlt(bookings$datetime, format="%m/%d/%Y %H:%M")$hour
mins   <- as.POSIXlt(bookings$datetime, format="%m/%d/%Y %H:%M")$min
minday <- hours*60 + mins
plot(density(minday), main="Minute (of the day) of first ever booking", col="blue", lwd=2)
mean(minday)
sd(minday)
interval<-mean(minday)+c(-1.96,1.96)*sd(minday)/sqrt(length(minday))
interval
#3-a-ii
resamples<-replicate(2000,sample(minday ,length(minday), replace=TRUE))
resamples
#3-a-iii
plot(density(population),lwd=0,ylim=c(0, 0.009), main="population vs. bootstrapped samples")
lines(density(sample_i), col=rgb(0.0, 0.4, 0.0, 0.01))
sample_means<-apply(resamples, 2, FUN=plot_resample_density)
#3-a-iii
#plot(density(population),lwd=0,ylim=c(0, 0.009), main="population vs. bootstrapped samples")
plot_resample_density<-function(sample_i) {
lines(density(sample_i), col=rgb(0.0, 0.4, 0.0, 0.01))
return(mean(sample_i))
}
sample_means<-apply(resamples, 2, FUN=plot_resample_density)
#3-a-iii
plot(density(minday),lwd=0,ylim=c(0, 0.009), main="population vs. bootstrapped samples")
plot_resample_density<-function(sample_i) {
lines(density(sample_i), col=rgb(0.0, 0.4, 0.0, 0.01))
return(mean(sample_i))
}
#3-a-iii
plot(density(minday),lwd=0,ylim=c(0, 0.009), main="population vs. bootstrapped samples")
plot_resample_density<-function(sample_i) {
lines(density(sample_i), col=rgb(0.0, 0.4, 0.0, 0.01))
return(mean(sample_i))
}
sample_means<-apply(resamples, 2, FUN=plot_resample_density)
lines(density(sample0),lwd=3)
lines(density(population),lwd=2,lty="dashed")
#3-a-ii
minday_size=300
minday2=sample(minday,minday_size)
minday_mean=mean(minday)
resamples<-replicate(2000,sample(minday2 ,length(minday2), replace=TRUE))
resamples
#3-a-iii
plot(density(minday),lwd=0,ylim=c(0, 0.009), main="population vs. bootstrapped samples")
plot_resample_density<-function(sample_i) {
lines(density(sample_i), col=rgb(0.0, 0.4, 0.0, 0.01))
return(mean(sample_i))
}
sample_means<-apply(resamples, 2, FUN=plot_resample_density)
lines(density(minday2),lwd=3)
lines(density(minday),lwd=2,lty="dashed")
#3-a-i
bookings <- read.table("first_bookings_datetime_sample.txt", header=TRUE)
bookings$datetime[1:9]
hours  <- as.POSIXlt(bookings$datetime, format="%m/%d/%Y %H:%M")$hour
mins   <- as.POSIXlt(bookings$datetime, format="%m/%d/%Y %H:%M")$min
minday <- hours*60 + mins
plot(density(minday), main="Minute (of the day) of first ever booking", col="blue", lwd=2)
mean(minday)
sd(minday)
interval<-mean(minday)+c(-1.96,1.96)*sd(minday)/sqrt(length(minday))
interval
#3-a-ii
minday_size=300
minday2=sample(minday,minday_size)
minday_mean=mean(minday)
resamples<-replicate(2000,sample(minday2 ,length(minday2), replace=TRUE))
resamples
#3-a-iii
plot(density(minday),lwd=0,ylim=c(0, 0.009), main="population vs. bootstrapped samples")
plot_resample_density<-function(sample_i) {
lines(density(sample_i), col=rgb(0.0, 0.4, 0.0, 0.01))
return(mean(sample_i))
}
sample_means<-apply(resamples, 2, FUN=plot_resample_density)
lines(density(minday2),lwd=3)
lines(density(minday),lwd=2,lty="dashed")
#3-a-iv
interval<-function(data){
return (c(mean(data)-1.96*sd(data),mean(data)+1.96*sd(data)))
}
bootstrap_interval<-sapply(resamples,interval)
bootstrap_interval
#3-b-i
median(minday)
#3-b-ii
boostrap<-sapply(resamples,median)
boostrap
#3-b-iii
interval<-function(data){
return (c(mean(data)-1.96*sd(data),mean(data)+1.96*sd(data)))
}
bootstrap_interval<-sapply(boostrap,interval)
bootstrap_interval
```
?union()
```
knitr::opts_chunk$set(echo = TRUE)
union(x,y)
x=c(1,3,5,7,9)
y=c(2,4,6,8,10)
union(x,y)
knitr::opts_chunk$set(echo = TRUE)
intersect(x, y)
x=c(1,3,5,7,9)
y=c(2,4,6,8,10)
union(x,y)
intersect(x, y)
setdiff(x, y)
setdiff(y, x)
setequal(x, y)
?read.table
?read.table(marketing_data.csv)
read.table(marketing_data.csv)
read.table(marketing_data.csv)
read.table("marketing_data.csv")
read.table("marketing_data.csv")
read.csv("C:/Users/p0952/Desktop/金融大數據/marketing_data.csv")
read.csv("C:/Users/p0952/Desktop/金融大數據/marketing_data.csv")
read.csv(file="C:/Users/p0952/Desktop/金融大數據/marketing_data.csv")
setwd(C:/Users/p0952/Desktop/金融大數據/HW2)
setwd("C:/Users/p0952/Desktop/金融大數據/HW2")
read.csv(file="marketing_data.csv")
read.csv("marketing_data.csv")
setwd("C:/Users/p0952/Desktop/金融大數據/HW2")
read.csv("fertility.csv")
getwd()
read.csv("C:/Users/p0952/Desktop/金融大數據/HW2/fertility.csv")
read.csv("C:/Users/p0952/Desktop/金融大數據/HW2/fertility.csv")
read.csv("/C:/Users/p0952/Desktop/金融大數據/HW2/fertility.csv")
read.csv("C:/Users/p0952/Desktop/金融大數據/HW2/fertility.csv")
read.csv("marketing_data.cav")
read.csv("marketing_data.csv")
data<-data$Year_Birth
data<-read.csv("marketing_data.csv")
data<-data$Year_Birth
data
data<-data-2000
data
data<-2000-data
data
data<-data$Year_Birth
data<-read.csv("marketing_data.csv")
data<-data$Year_Birth
data
year_now=2000
data<-2000-data
data
data<-read.csv("marketing_data.csv")
data<-data$Year_Birth
year_now=2000
Age<-2000-data
Age
Age
underage:ifelse(0<Age<=17,1,0)
underage:ifelse(0<Age<17,1,0)
underage:ifelse(Age<17,1,0)
underage<-ifelse(Age<17,1,0)
underage<-ifelse(0<Age<17,1,0)
underage<-ifelse(Age>0&&Age<17,1,0)
underage<-ifelse(Age>0&&Age<=17,1,0)
underage
underage<-ifelse(Age>0&&Age<=17,1,0)
underage
Age
Age$underage<-ifelse(Age>0&&Age<=17,1,0)
Age
year_now=2000
data$Age<-Year_nowdata$Year_Birth
data$Age<-Year_now-data$Year_Birth
data<-read.csv("marketing_data.csv")
year_now=2000
data$Age<-year_now-data$Year_Birth
data
data
data(head)
data<-read.csv("marketing_data.csv")
year_now=2000
data$Age<-year_now-data$Year_Birth
data
data$Age
data$underage<-ifelse(data$Age>0&&data$Age<=17,1,0)
data$underage
data$Age
data$underage<-ifelse(data$Age>0,1,0)
data$underage
data$underage<-ifelse(data$Age>0&&data$Age<17,1,0)
data$underage
data$Age
data$underage<-ifelse(data$Age>0&data$Age<17,1,0)
data$underage
data$young-adult<-ifelse(data$Age>=18&data$Age<=25,1,0)
data$young_adult<-ifelse(data$Age>=18&data$Age<=25,1,0)
data$young_adult
data$matural<-ifelse(data$Age>=56&data$Age<=65,1,0)
data$adult<-ifelse(data$Age>=26&data$Age<=40,1,0)
data$middle_age<-ifelse(data$Age>=41&data$Age<=55,1,0)
data$matural<-ifelse(data$Age>=56&data$Age<=65,1,0)
data$natural
data$matural
data$senior<-ifelse(data$Age>66,1,0)
if (len(x) >1) {
print("x is scalar")
} else print("x is not scalar")
?length
if (length(x) >1) {
print("x is scalar")
} else print("x is not scalar")
x<-(1,2,3,4)
x<-c(1,2,3,4)
if (x < 0) {
print("x is negative")
} else print("x is not negative")
ifelse(x < 0, "x is negative", "x is not negative")
if (x < 0) {
print("x is negative")
} else print("x is not negative")
ifelse(x < 0, "x is negative", "x is not negative")
x = -2:2
y1 = signif(x < 0)    # 1 1 0 0 0
y2 = 1*(x < 0)        # 1 1 0 0 0
!y1
y2 = -1*(x < 0)        # 1 1 0 0 0
y2
ans1=y1-y1
ans1
-y1
x = -2:
?signif
x = -2:
?signif()
x = -2:
y1 = signif(x < 0)    # 1 1 0 0 0
x = -2
y1 = signif(x < 0)    # 1 1 0 0 0
!y1
y1
x = -2:2
y1 = signif(x < 0)    # 1 1 0 0 0
y1
!y1
-y1
1-y1
ans1=y1-(1-y1)
ans1
ans1=2*y1-1
ans1
ans2=y2-(1-y2)
ans2
y2# 1 1 0 0 0
y2 = -1*(x > 0)
ans2=y2-(1-y2)
ans2
y2
y2 = 1*(x < 0)
y2
ans2=y2-(1-y2)
ans2
gl(3,4,labels = LETTERS[1:3])
?gl
?rep
?factor
factor(labels = LETTERS[1:3])
factor(levels = LETTERS[1:3])
?rep
rep(factor(levels = LETTERS[1:3]),each=4)
rep(factor(levels = LETTERS[1:3]),times=4,each=4)
c
?factor
gl(3,4,labels = LETTERS[1:3])
factor(rep(LETTERS[1:3],each=4),levels = LETTERS[1:3])
gl(3,4,labels = LETTERS[1:3])
read.csv("fertility.csv")
read.csv("fertility.csv")
data<-read.csv("fertility.csv")
data<-read.csv("fertility.csv")
data<-read.csv("fertility.csv")
getwd()
data<-read.csv("fertility.csv")
data<-read.csv("fertility.csv",fileEncoding='big5')
data<-read.csv("fertility.csv",fileEncoding='big5')
data
head(data)
t(data)
data<-read.csv("fertility.csv",fileEncoding='big5')
data<-read.csv("homework2.csv",fileEncoding='big5')
data<-read.csv("homework2.csv")
data<-read.csv("homework2.csv")
rownames(data)<-data$TIME
data
print(data)
data$Value
data2<-read.csv("homework2.csv")
head(data2,10)
data2<-read.csv("homework2.csv",header="TRUE")
?read.csv
data2<-read.csv("homework2.csv",header=TRUE)
head(data2,10)
print(head(data2,10))
data2$Value
data<-read.csv("marketing_data.csv")
data
head(data,10)
print(head(data,10))
data2<-read.csv("homework2.csv",header=TRUE)
data2$Value
data2$FREQUENCY
#rownames(data)<-data$TIME
print(data2)
data2<-data.frame(read.csv("homework2.csv",header=TRUE))
#rownames(data)<-data$TIME
print(data2)
print(head(data2,10))
data2<-data.frame(read.csv("homework2.csv"))
#rownames(data)<-data$TIME
print(data2)
